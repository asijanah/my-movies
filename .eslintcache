[{"C:\\Users\\asafj\\Desktop\\frontEnd\\my projects\\my-movies\\src\\index.js":"1","C:\\Users\\asafj\\Desktop\\frontEnd\\my projects\\my-movies\\src\\reportWebVitals.js":"2","C:\\Users\\asafj\\Desktop\\frontEnd\\my projects\\my-movies\\src\\App.js":"3","C:\\Users\\asafj\\Desktop\\frontEnd\\my projects\\my-movies\\src\\pages\\home\\index.jsx":"4","C:\\Users\\asafj\\Desktop\\frontEnd\\my projects\\my-movies\\src\\pages\\actors\\index.jsx":"5","C:\\Users\\asafj\\Desktop\\frontEnd\\my projects\\my-movies\\src\\components\\Navbar\\index.jsx":"6","C:\\Users\\asafj\\Desktop\\frontEnd\\my projects\\my-movies\\src\\pages\\detailsPage\\index.jsx":"7","C:\\Users\\asafj\\Desktop\\frontEnd\\my projects\\my-movies\\src\\pages\\card\\index.jsx":"8","C:\\Users\\asafj\\Desktop\\frontEnd\\my projects\\my-movies\\src\\api\\TMDB.js":"9","C:\\Users\\asafj\\Desktop\\frontEnd\\my projects\\my-movies\\src\\api\\People.js":"10","C:\\Users\\asafj\\Desktop\\frontEnd\\my projects\\my-movies\\src\\api\\OMDB.js":"11"},{"size":614,"mtime":1607258533124,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"13"},{"size":721,"mtime":1607269310218,"results":"15","hashOfConfig":"13"},{"size":11129,"mtime":1607269277635,"results":"16","hashOfConfig":"13"},{"size":1874,"mtime":1607256882684,"results":"17","hashOfConfig":"13"},{"size":1750,"mtime":1607256862460,"results":"18","hashOfConfig":"13"},{"size":8615,"mtime":1607256882692,"results":"19","hashOfConfig":"13"},{"size":1697,"mtime":1607256882690,"results":"20","hashOfConfig":"13"},{"size":2261,"mtime":1607256823172,"results":"21","hashOfConfig":"13"},{"size":315,"mtime":1607256823171,"results":"22","hashOfConfig":"13"},{"size":258,"mtime":1607256823167,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"f925bb",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\Users\\asafj\\Desktop\\frontEnd\\my projects\\my-movies\\src\\index.js",[],["53","54"],"C:\\Users\\asafj\\Desktop\\frontEnd\\my projects\\my-movies\\src\\reportWebVitals.js",[],"C:\\Users\\asafj\\Desktop\\frontEnd\\my projects\\my-movies\\src\\App.js",[],"C:\\Users\\asafj\\Desktop\\frontEnd\\my projects\\my-movies\\src\\pages\\home\\index.jsx",["55","56","57","58","59"],"import React, { useState, useEffect } from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './home.css';\r\nimport { getTMDBconf, getTMDBmovies } from '../../api/TMDB';\r\nimport { getOMDB } from '../../api/OMDB';\r\nimport Card from '../card/index.jsx';\r\nimport MovieDetails from '../detailsPage/index.jsx';\r\nimport MovieNav from '../../components/Navbar/index.jsx';\r\nimport People from '../../pages/actors/index.jsx';\r\n\r\n\r\nfunction Home() {\r\n\r\n    // const [conf, setConf] = useState({});\r\n    // const [page, setPage] = useState({});\r\n    const emptyMovieArray = [\r\n        {\r\n            page: 0,\r\n            total_pages: 0,\r\n            queryType: \"discover\",\r\n            adult: '',\r\n            base_url: '',\r\n            logo_sizes: [\"w45\", \"w92\", \"w154\", \"w185\", \"w300\", \"w500\", \"original\"],\r\n            poster_sizes: [\"w92\", \"w154\", \"w185\", \"w342\", \"w500\", \"w780\", \"original\"],\r\n            profile_sizes: [\"w45\", \"w185\", \"h632\", \"original\"],\r\n            still_sizes: [\"w92\", \"w185\", \"w300\", \"original\"],\r\n            backdrop_path: '',\r\n            genre_ids: [],\r\n            id: 0,\r\n            original_language: '',\r\n            original_title: '',\r\n            overview: '',\r\n            popularity: '',\r\n            poster_path: '',\r\n            release_date: '',\r\n            title: '',\r\n            video: '',\r\n            OMDB: null\r\n            // attempts at returning only parts of the OMDB object failed with key doesn't exist messages \r\n        }\r\n    ];\r\n\r\n    const [movies, setMovies] = useState(emptyMovieArray);\r\n    let search = '';\r\n\r\n    const onSearch = ({ target: { value: text } }) => {\r\n        if (!text) {\r\n            setMovies(movies);\r\n            return\r\n        }\r\n        const lower = text.toLowerCase();\r\n        const filtered = movies.filter((movie) =>\r\n            movie.title.toLowerCase().includes(lower)\r\n        )\r\n        setMovies(filtered)\r\n    }\r\n\r\n    const sortByViewers = () => {\r\n        const populars = [...movies];\r\n        populars.sort((a, b) => b.popularity - a.popularity);\r\n        setMovies(populars);\r\n    };\r\n\r\n\r\n    // {movies.release_date} shuold be convert to date so that sortByDate function work properly\r\n    const sortByDate = () => {\r\n        const newest = [...movies];\r\n        newest.sort((a, b) => new Date(b.release_date) - (new Date(a.release_date)))\r\n        setMovies(newest);\r\n    };\r\n\r\n    const sortAlphabetically = () => {\r\n        const alfaBet = [...movies];\r\n        alfaBet.sort((a, b) => (a.title > b.title) ? 1 : -1);\r\n        setMovies(alfaBet);\r\n    };\r\n\r\n    const showWhichMovieList = (e) => {\r\n        // if (e.target.value === 'top_rated') {\r\n        fetchMovies(e.target.value);\r\n        //    } else if (e.target.value === 'discover') {                            \r\n        // fetchMovies\r\n        //    }            \r\n    }\r\n\r\n    async function fetchMovies(queryType, pageNo = 1) {\r\n        // if(!localStorage.getItem('movies')){                   //stop localstorage - gs \r\n        let configuration = await getTMDBconf();\r\n\r\n        // top_rated\r\n        // discover\r\n        let tmpMoviesPage = await getTMDBmovies(queryType, pageNo);\r\n\r\n        //based on Esraa's example - for each movie, get data from second API \r\n        //const response2 = await Promise.all(movies.map(movie => secondApiRequest(movie.name)))\r\n        const moreMoviesData = await Promise.all(tmpMoviesPage.data.results.map\r\n            (movie => getOMDB(movie.title)));\r\n        //console.log(\"=OMDB=\", moreMoviesData); \r\n        // now, lets create a unified Array of movies                     \r\n\r\n        // console.log(\"configuration=\", configuration); \r\n        const c_base_url = configuration.data.images.base_url;\r\n        const c_logo_sizes = configuration.data.images.logo_sizes;   // [\"w45\", \"w92\", \"w154\", \"w185\", \"w300\", \"w500\", \"original\"]        \r\n        const c_poster_sizes = configuration.data.images.poster_sizes; // [\"w92\", \"w154\", \"w185\", \"w342\", \"w500\", \"w780\", \"original\"]\r\n        const c_profile_sizes = configuration.data.images.profile_sizes; // [\"w45\", \"w185\", \"h632\", \"original\"]\r\n        const c_still_sizes = configuration.data.images.still_sizes; // [\"w92\", \"w185\", \"w300\", \"original\"]\r\n\r\n        const moviesArray = [];\r\n\r\n        // console.log(\"tmpMoviesPage=\", tmpMoviesPage); \r\n        tmpMoviesPage.data.results.map(movie => {\r\n            // console.log(\"in loop OMDB movie=\", moreMoviesData); \r\n            //console.log(\"in loop OMDB movie=\", moreMoviesData.find(OMDBmovie=>OMDBmovie.data.Title===movie.title)); \r\n            moviesArray.push(\r\n                {\r\n                    page: tmpMoviesPage.data.page,\r\n                    total_pages: tmpMoviesPage.data.total_pages,\r\n                    queryType: queryType,\r\n                    adult: movie.adult,\r\n                    base_url: c_base_url,\r\n                    logo_sizes: c_logo_sizes,\r\n                    poster_sizes: c_poster_sizes,\r\n                    profile_sizes: c_profile_sizes,\r\n                    still_sizes: c_still_sizes,\r\n                    backdrop_path: movie.backdrop_path,\r\n                    genre_ids: movie.genre_ids,\r\n                    id: movie.id,\r\n                    original_language: movie.original_language,\r\n                    original_title: movie.original_title,\r\n                    overview: movie.overview,\r\n                    popularity: movie.popularity,\r\n                    poster_path: movie.poster_path,\r\n                    release_date: movie.release_date,\r\n                    title: movie.title,\r\n                    video: movie.video,\r\n                    OMDB: moreMoviesData.find(OMDBmovie => OMDBmovie.data.Title === movie.title)\r\n                    // attempts at returning only parts of the OMDB object failed with key doesn't exist messages \r\n                });\r\n        });\r\n\r\n        // setConf(configuration.data.images); \r\n        // setPage(tmpMoviesPage.data);            // page \r\n        setMovies(moviesArray);     // movies   - moviesPage.data.results\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchMovies(\"discover\");\r\n    }, []);\r\n\r\n    // console.log(\"conf=\",conf);    \r\n    // console.log(\"base_url=\",conf.base_url);    \r\n    // console.log(\"page=\",page);                   \r\n    console.log(\"movies=\", movies);\r\n    // console.log(\"movies.ganer=\",movies.\r\n    // genres.name);\r\n    return (\r\n        // <BrowserRouter>\r\n\r\n        //     <MovieNav onSearch={onSearch} />\r\n\r\n        //     <Switch>\r\n        //         <Route path={[\"/home\", \"/\"]} exact={true}>\r\n        <>\r\n            <div className=\"filter\">\r\n                <div className=\"movie-list mt-3\">\r\n                    <label className=\"selectMovie\" htmlFor=\"sorting\">which movie list:</label>\r\n                    <select className=\"dropDown\" defaultValue=\"discover\"\r\n                        onChange={showWhichMovieList}\r\n                        name=\"whichMovieList\"\r\n                        id=\"whichMovieList\">\r\n                        <option value=\"discover\">Browse </option>\r\n                        <option value=\"top_rated\">Top Rated</option>\r\n                    </select>\r\n                </div>\r\n\r\n                <div class=\"form-check\">\r\n                    <input class=\"form-check-input\" type=\"radio\" name=\"exampleRadios\" id=\"exampleRadios1\" value=\"option1\"\r\n                        onChange={sortByViewers}\r\n                    />\r\n                    <label class=\"form-check-label\" for=\"exampleRadios1\">\r\n                        Most popular Movies\r\n                            </label>\r\n                </div>\r\n                <div class=\"form-check\">\r\n                    <input class=\"form-check-input\" type=\"radio\" name=\"exampleRadios\" id=\"exampleRadios2\" value=\"option2\"\r\n                        onChange={sortByDate}\r\n                    />\r\n                    <label class=\"form-check-label\" for=\"exampleRadios2\">\r\n                        Newest Movies\r\n                            </label>\r\n                </div>\r\n                <div class=\"form-check\">\r\n                    <input class=\"form-check-input\" type=\"radio\" name=\"exampleRadios\" id=\"exampleRadios2\" value=\"option2\"\r\n                        onChange={sortAlphabetically}\r\n                        check />\r\n                    <label class=\"form-check-label\" for=\"exampleRadios2\">\r\n                        Ascending by abc\r\n                            </label>\r\n                </div>\r\n\r\n\r\n                <div className=\"pageNavigation-section\">\r\n                    <span className=\"displayPageNum\">{`Page ${movies[0].page} of ${movies[0].total_pages}`}</span>\r\n                    <div className=\"btn-wrapper\">\r\n                        {(movies[0].page > 1) &&\r\n                            <button className=\"navBtn mr-3\"\r\n                                onClick={() =>\r\n                                    fetchMovies(movies[0].queryType, movies[0].page - 1)}>\r\n                                Back</button>}\r\n                        {(movies[0].page < movies[0].total_pages) &&\r\n                            <button className=\"navBtn mr-3\"\r\n                                onClick={() =>\r\n                                    fetchMovies(movies[0].queryType, movies[0].page + 1)}>\r\n                                Next</button>}\r\n                        {(movies[0].page > 1) &&\r\n                            <button className=\"navBtn mr-3\"\r\n                                onClick={() =>\r\n                                    fetchMovies(movies[0].queryType, 1)}>\r\n                                First</button>}\r\n                        {(movies[0].page < movies[0].total_pages) &&\r\n                            <button className=\"navBtn mr-3\"\r\n                                onClick={() =>\r\n                                    fetchMovies(movies[0].queryType, movies[0].total_pages)}>\r\n                                Last</button>}\r\n                    </div>\r\n\r\n                    {/* {movies[0].page===1 ?<p>Hello</p>:<p>World</p>}  */}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"cards-grid\" >\r\n                {/* <span>{`${movie.id}:  ${movie.title}`} </span>\r\n                            <img src={`${conf.base_url}/${conf.logo_sizes[1]}/${movie.poster_path}`} alt={movie.title}/> */}\r\n\r\n                {movies.map(movie => {\r\n                    return (\r\n                        <Card key={movie.id} movie={movie} />\r\n                    )\r\n                })}\r\n                {/* <button onClick={()=>showMovies()}> Show Movies</button> */}\r\n            </div>\r\n        \r\n                {/* </Route>\r\n                <Route path={'/actors'}>\r\n                    <div className=\"actorsWrapper\">\r\n                        <People />\r\n                    </div>\r\n                </Route>\r\n                <Route path=\"/movie/:movieId\">\r\n                    <MovieDetails movies={movies} />\r\n                </Route>\r\n            </Switch>\r\n        </BrowserRouter> */}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Home;\r\n","C:\\Users\\asafj\\Desktop\\frontEnd\\my projects\\my-movies\\src\\pages\\actors\\index.jsx",["60","61"],"import React, { useState, useEffect } from 'react';\r\n\r\nimport { getMostPopular } from '../../api/People';\r\nimport './actors.css';\r\n\r\nfunction People() {\r\n\r\n    const [mostPopular, setMostPopular] = useState([]);\r\n    const [btn, setBtn] = useState(1);\r\n\r\n    const next = (pageNo) => {\r\n        setBtn(pageNo + 1)\r\n        console.log(pageNo);\r\n    };\r\n    const back = (pageNo) => {\r\n        setBtn(pageNo - 1)\r\n        console.log(pageNo);\r\n    };\r\n\r\n    useEffect(async () => {\r\n        const response = await getMostPopular(btn);\r\n        setMostPopular(response.data.results);\r\n\r\n    }, [btn]);\r\n\r\n    const imgAddress = 'https://image.tmdb.org/t/p/w500'\r\n    return (\r\n\r\n        <div>\r\n\r\n            <button onClick={() => next(btn)} className=\"actors-btn\">Next</button>\r\n            <button onClick={() => back(btn)} className=\"actors-btn\">Back</button>\r\n\r\n            <div className=\"actors-card px-2\">\r\n                {\r\n                    mostPopular && mostPopular.map(item =>\r\n                        <div className=\"actors\">\r\n                            <div className=\"img-wrapper\">\r\n                                <img className=\"actor-img\" src={`${imgAddress}${item.profile_path}`} />\r\n                            </div>\r\n                            <h2 className=\"actor-name\">{item.name}</h2>\r\n                            <ul>\r\n                                {item.known_for.map(movie => {\r\n                                    return <li>{movie.title}</li>\r\n                                })}\r\n                            </ul>\r\n                            <footer className=\"actor-popularity\">\r\n                                <h5>Actor Rating: {item.popularity}</h5>\r\n                            </footer>\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default People\r\n","C:\\Users\\asafj\\Desktop\\frontEnd\\my projects\\my-movies\\src\\components\\Navbar\\index.jsx",["62","63","64"],"import { Link } from 'react-router-dom';\r\n\r\n\r\nfunction MovieNav(props) {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n            <Link to={'/'}>\r\n            <a className=\"navbar-brand\" href=\"#\">Movies</a>\r\n            </Link>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                <ul className=\"navbar-nav mr-auto\">\r\n                    <li className=\"nav-item active\">\r\n                        <Link to={'/'}>\r\n                        <a className=\"nav-link\" href=\"#\">Home <span className=\"sr-only\">(current)</span></a>\r\n                        </Link>\r\n                    </li>\r\n                    <li className=\"nav-item active\">\r\n                        <Link to={'/actors'}>\r\n                        <a className=\"nav-link\" href=\"#\">Actors</a>\r\n                        </Link>\r\n                    </li>\r\n                \r\n                </ul>\r\n                <form className=\"form-inline my-2 my-lg-0\">\r\n                    <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"\r\n                    defaultValue={props.search}\r\n                    onChange={props.onSearch}\r\n                    />\r\n                    <button className=\"btn btn-outline-secondary my-2 my-sm-0\" type=\"submit\">Search</button>\r\n                </form>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\nexport default MovieNav","C:\\Users\\asafj\\Desktop\\frontEnd\\my projects\\my-movies\\src\\pages\\detailsPage\\index.jsx",["65","66","67","68"],"import React, { useState, useEffect } from 'react';\r\nimport {useParams, useHistory, Link} from 'react-router-dom';\r\nimport {Route} from 'react-router-dom'; \r\n\r\nimport './style.css';\r\nimport { actorDetails, recomendations, getOneMovie, getTMDBconf, getCredits, getMoviesForActor} from '../../api/TMDB';\r\nimport { getOMDB } from '../../api/OMDB';\r\n\r\n//play with material-ui\r\nimport Button from '@material-ui/core/Button';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport Alert from '@material-ui/lab/Alert';\r\n//icons\r\nimport RateReviewIcon from '@material-ui/icons/RateReview';\r\nimport ThumbUpOutlinedIcon from '@material-ui/icons/ThumbUpOutlined';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport TheatersIcon from '@material-ui/icons/Theaters';\r\n//fonts\r\nimport 'fontsource-roboto';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nfunction MovieDetails () { \r\n\r\n    let {movieId}=useParams(); \r\n    const history = useHistory();\r\n\r\n    const [movie, setMovie] = useState();\r\n    const [confImg, setConfImg] = useState();\r\n    const [actor, setActor] = useState();\r\n    const [moviesForActor, setMoviesForActor] = useState();\r\n    const [rating, getRating] = useState();\r\n    const [recomendedMovies, setRecomendedMovies] = useState();\r\n    const [loading, setLoading] = useState(false);\r\n    const [open, setOpen] = useState(false); \r\n    \r\n    useEffect(async () => {\r\n        window.scrollTo(0, 0);\r\n        \r\n        //add flag for loading sign\r\n        setLoading(true);\r\n\r\n        //get movie \r\n        const movieData = await getOneMovie(movieId);\r\n        setMovie(movieData);\r\n\r\n        //get rating from OMDB\r\n        const omdb = await getOMDB(movieData.data.title);\r\n        getRating(omdb);\r\n\r\n        //get configuration for images\r\n        const imgConf = await getTMDBconf();\r\n        setConfImg(imgConf);\r\n\r\n        //get actors from credits\r\n        const credits = await getCredits(movieId);\r\n        setActor(credits);\r\n\r\n        //show recomended movies\r\n        const recomendedMoviesData = await recomendations(movieId);\r\n        setRecomendedMovies(recomendedMoviesData);\r\n\r\n        setLoading(false);\r\n\r\n    },[movieId]);\r\n\r\n    //alert for Review\r\n    const handleClick = () => {\r\n        setOpen(true);\r\n        };\r\n        const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n        };\r\n\r\n    //show movies of a specific actor\r\n    const showMovies = async (actorId) => {\r\n        const actorMoviesData = await getMoviesForActor(actorId);\r\n        setMoviesForActor(actorMoviesData);\r\n        console.log(actorMoviesData);\r\n    }\r\n\r\n    const removeActorMovies = () => {\r\n        setMoviesForActor();\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <div className=\"head\">\r\n                {\r\n                    movie &&\r\n                    <div className=\"detailsPage head-details\"> \r\n                    <Typography variant=\"h2\">\r\n                        {movie.data.title}\r\n                    </Typography>\r\n                    <Typography variant=\"subtitle1\">\r\n                        {movie.data.tagline}\r\n                    </Typography>\r\n                        <h4 className=\"plot-summery\"><i>{movie.data.overview}</i></h4>\r\n                        <h4 className=\"plot-summery\">Released date: {movie.data.release_date}</h4>\r\n                        <Typography variant=\"h4\">\r\n                            Ratings\r\n                        </Typography>\r\n                        {rating && !rating.data.Error && rating.data.Ratings.map((rating, index) => \r\n                        {\r\n                            return (\r\n                                <h3 key={index}>\r\n                                    <div><ThumbUpOutlinedIcon /> {rating.Source} : {rating.Value}</div>\r\n                                </h3>\r\n                            )\r\n                        }\r\n                        )\r\n                        }\r\n                        {\r\n                            rating && rating.data.Error && \r\n                            <h3><i>No ratings</i></h3>\r\n\r\n                        }\r\n                        <Button className=\"detailsPage review-button\" variant=\"contained\" color=\"primery\" startIcon={<RateReviewIcon />}\r\n                            onClick={handleClick}\r\n                        >\r\n                            Add your own review\r\n                        </Button>\r\n                        <Snackbar open={open} autoHideDuration={6000} onClose={handleClose} >\r\n                            <Alert variant=\"filled\" severity=\"error\" >\r\n                                Nobody cares what you think\r\n                            </Alert>\r\n                        </Snackbar>\r\n                    </div>\r\n                }\r\n                {\r\n                    confImg && \r\n                    <img className='detailsPage mainImg' src={`${confImg.data.images.base_url}/${confImg.data.images.profile_sizes[2]}/${movie.data.poster_path}`} alt={movie.data.title} />   \r\n                }\r\n                {/* <button onClick={goHome} >Back</button> */}\r\n            </div>\r\n\r\n        <hr />\r\n\r\n        {\r\n            loading &&\r\n            <img className ='loading' src='/images/loading.gif' alt='Loading' />\r\n        }\r\n        {\r\n            !loading &&\r\n            <div className=\"afetrLoading\">\r\n                <div className=\"headline Lead-Actors\">\r\n                    <Typography variant=\"h3\">\r\n                        Lead Actors:\r\n                    </Typography>\r\n                </div>\r\n                <div className=\"detaisPage actors\">\r\n                    <div>\r\n                        {actor && \r\n                            actor.data.cast.slice(0,5).map((actorUrl, index) => \r\n                            {return(\r\n                                actorUrl.profile_path && \r\n                                <Tooltip key={index} title={actorUrl.name} placement=\"top\">\r\n                                    <img key={index} className=\"oneActor\" \r\n                                    src={`${confImg.data.images.base_url}/${confImg.data.images.profile_sizes[2]}/${actorUrl.profile_path}`} alt={actorUrl.name} \r\n                                    onClick={() => showMovies(actorUrl.id)}\r\n                                    />\r\n                                </Tooltip>\r\n                                )\r\n                            })\r\n                        }\r\n                        <ul>\r\n                        <h2>Do I look familiar to you?</h2>\r\n                            {\r\n                                moviesForActor && \r\n                                moviesForActor.data.cast.slice(0,5).map(movie => \r\n                                <li><TheatersIcon color=\"primary\"/> {` I played ${movie.character} in `}\r\n                                    <Link to={`/movie/${movie.id}`} onClick={() => removeActorMovies()}>{movie.original_title}</Link>\r\n                                </li>)\r\n                            }\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n\r\n                <hr />\r\n\r\n                    <div className=\"similarMovies-header\">\r\n                        <Typography variant=\"h4\">\r\n                            You may like also...\r\n                        </Typography>\r\n                    </div>\r\n                <div className=\"similarMovies\">\r\n                    {recomendedMovies && recomendedMovies.data.results.slice(0,10).map((movieUrl, index) => \r\n                    {return(\r\n                    movieUrl.poster_path &&\r\n                        <Route path=\"/movie/:movieId\">\r\n                            <Link to={`/movie/${movieUrl.id}`} onClick={() => removeActorMovies()}>\r\n                                <img key={index} className=\"movieSim\"  \r\n                                src={`${confImg.data.images.base_url}/${confImg.data.images.profile_sizes[2]}/${movieUrl.poster_path}`} \r\n                                alt={movieUrl.title}\r\n                                />   \r\n                            </Link>\r\n                        </Route>\r\n                    )}\r\n                    )}\r\n                </div>\r\n                <div className=\"button backToMain\">\r\n                <Button href=\"/\" variant=\"contained\" color=\"secondary\">\r\n                    <HomeIcon />\r\n                </Button>\r\n            </div>\r\n            </div>\r\n            \r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MovieDetails; ","C:\\Users\\asafj\\Desktop\\frontEnd\\my projects\\my-movies\\src\\pages\\card\\index.jsx",["69","70","71","72","73","74"],"import React, { useState, useEffect } from 'react';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './card.css'\r\n\r\n\r\nfunction Card(props) {\r\n    return (\r\n        <div className=\"main-cards px-2\">\r\n            <div className=\"movie-card\">\r\n                <Link to={`/movie/${props.movie.id}`}>\r\n                    <img className=\"image\" src={`${props.movie.base_url}/${props.movie.logo_sizes[2]}/${props.movie.poster_path}`} />\r\n                </Link>\r\n                {props.movie.OMDB &&\r\n                        <p className=\"categories\">{props.movie.OMDB.data.Genre.split(\",\")[0]}</p>\r\n                }\r\n                <div className=\"card-contant\">\r\n                    <h3 className=\"title\">{props.movie.title}</h3>\r\n                    <p className=\"year\">Released: {props.movie.release_date}</p>\r\n                    <footer className=\"foot\">\r\n                        <div className=\"meta\">\r\n                            <div className=\"duration\">\r\n                                {props.movie.OMDB &&\r\n                                    <span className=\"duration\"><i className=\"fa fa-clock-o\"></i>Duration: {props.movie.OMDB.data.Runtime}</span>\r\n                                }\r\n                            </div>\r\n                            <div className='viewers'>\r\n                                <span className=\"views\"><i className=\"fa fa-comments\"></i><a href=\"#\">Viewers Rate: {props.movie.popularity}</a></span>\r\n                            </div>\r\n                        </div>\r\n                    </footer>\r\n                </div>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Card; ","C:\\Users\\asafj\\Desktop\\frontEnd\\my projects\\my-movies\\src\\api\\TMDB.js",[],"C:\\Users\\asafj\\Desktop\\frontEnd\\my projects\\my-movies\\src\\api\\People.js",[],["75","76"],"C:\\Users\\asafj\\Desktop\\frontEnd\\my projects\\my-movies\\src\\api\\OMDB.js",[],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":3,"column":10,"nodeType":"83","messageId":"84","endLine":3,"endColumn":19},{"ruleId":"81","severity":1,"message":"85","line":3,"column":21,"nodeType":"83","messageId":"84","endLine":3,"endColumn":31},{"ruleId":"81","severity":1,"message":"86","line":4,"column":10,"nodeType":"83","messageId":"84","endLine":4,"endColumn":14},{"ruleId":"81","severity":1,"message":"87","line":47,"column":9,"nodeType":"83","messageId":"84","endLine":47,"endColumn":15},{"ruleId":"88","severity":1,"message":"89","line":114,"column":46,"nodeType":"90","messageId":"91","endLine":114,"endColumn":48},{"ruleId":"92","severity":1,"message":"93","line":20,"column":15,"nodeType":"90","endLine":24,"endColumn":6},{"ruleId":"94","severity":1,"message":"95","line":39,"column":33,"nodeType":"96","endLine":39,"endColumn":104},{"ruleId":"97","severity":1,"message":"98","line":8,"column":13,"nodeType":"96","endLine":8,"endColumn":50},{"ruleId":"97","severity":1,"message":"98","line":18,"column":25,"nodeType":"96","endLine":18,"endColumn":58},{"ruleId":"97","severity":1,"message":"98","line":23,"column":25,"nodeType":"96","endLine":23,"endColumn":58},{"ruleId":"81","severity":1,"message":"99","line":6,"column":10,"nodeType":"83","messageId":"84","endLine":6,"endColumn":22},{"ruleId":"81","severity":1,"message":"100","line":13,"column":8,"nodeType":"83","messageId":"84","endLine":13,"endColumn":16},{"ruleId":"81","severity":1,"message":"101","line":27,"column":11,"nodeType":"83","messageId":"84","endLine":27,"endColumn":18},{"ruleId":"92","severity":1,"message":"93","line":38,"column":15,"nodeType":"90","endLine":66,"endColumn":6},{"ruleId":"81","severity":1,"message":"102","line":1,"column":17,"nodeType":"83","messageId":"84","endLine":1,"endColumn":25},{"ruleId":"81","severity":1,"message":"103","line":1,"column":27,"nodeType":"83","messageId":"84","endLine":1,"endColumn":36},{"ruleId":"81","severity":1,"message":"82","line":2,"column":10,"nodeType":"83","messageId":"84","endLine":2,"endColumn":19},{"ruleId":"81","severity":1,"message":"85","line":2,"column":21,"nodeType":"83","messageId":"84","endLine":2,"endColumn":31},{"ruleId":"94","severity":1,"message":"95","line":13,"column":21,"nodeType":"96","endLine":13,"endColumn":134},{"ruleId":"97","severity":1,"message":"98","line":29,"column":91,"nodeType":"96","endLine":29,"endColumn":103},{"ruleId":"77","replacedBy":"104"},{"ruleId":"79","replacedBy":"105"},"no-native-reassign",["106"],"no-negated-in-lhs",["107"],"no-unused-vars","'useParams' is defined but never used.","Identifier","unusedVar","'useHistory' is defined but never used.","'Link' is defined but never used.","'search' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'actorDetails' is defined but never used.","'MuiAlert' is defined but never used.","'history' is assigned a value but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.",["106"],["107"],"no-global-assign","no-unsafe-negation"]