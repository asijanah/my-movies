{"version":3,"sources":["api/TMDB.js","api/OMDB.js","pages/card/index.jsx","pages/detailsPage/index.jsx","components/Navbar/index.jsx","api/People.js","pages/actors/index.jsx","pages/home/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["key","getTMDBconf","a","axios","get","configuration","getTMDBmovies","queryType","pageNo","response","recomendations","movieId","recomendedMovies","getOneMovie","movie","getCredits","credits","getMoviesForActor","actorId","movies","getOMDB","movieName","Card","props","className","to","id","src","base_url","logo_sizes","poster_path","OMDB","data","Genre","split","title","release_date","Runtime","href","popularity","MovieDetails","useParams","useHistory","useState","setMovie","confImg","setConfImg","actor","setActor","moviesForActor","setMoviesForActor","rating","getRating","setRecomendedMovies","loading","setLoading","open","setOpen","useEffect","window","scrollTo","movieData","omdb","imgConf","recomendedMoviesData","showMovies","actorMoviesData","console","log","removeActorMovies","Typography","variant","tagline","overview","Error","Ratings","map","index","Source","Value","Button","color","startIcon","onClick","Snackbar","autoHideDuration","onClose","event","reason","Alert","severity","images","profile_sizes","alt","cast","slice","actorUrl","profile_path","Tooltip","name","placement","character","original_title","results","movieUrl","path","MovieNav","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","placeholder","defaultValue","search","onChange","onSearch","getMostPopular","People","mostPopular","setMostPopular","btn","setBtn","item","known_for","Home","page","total_pages","adult","poster_sizes","still_sizes","backdrop_path","genre_ids","original_language","video","setMovies","fetchMovies","tmpMoviesPage","Promise","all","moreMoviesData","c_base_url","c_logo_sizes","c_poster_sizes","c_profile_sizes","c_still_sizes","moviesArray","push","find","OMDBmovie","Title","text","target","value","lower","toLowerCase","filtered","filter","includes","exact","htmlFor","e","class","populars","sort","b","for","newest","Date","alfaBet","check","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ffd380f2.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n// const key = '718ea0afa77356e0a5e2b18e7de231b7'; // gil \r\nconst key = '490315f3d2a02854114c705838149f3a'; // Dori\r\n\r\nconst getTMDBconf = async() => {\r\n    const configuration = await axios.get(`https://api.themoviedb.org/3/configuration?api_key=${key}`);\r\n    return configuration;\r\n}\r\n\r\nconst getTMDBmovies = async(queryType, pageNo=1) => {\r\n    // single movie details \r\n    //  const response = await axios.get(`https://api.themoviedb.org/3/movie/${movieID}?api_key=${key}`);\r\n    let response; \r\n    if (queryType===\"top_rated\") { \r\n    // list of top  rated movies     \r\n         response = await axios.get(`https://api.themoviedb.org/3/movie/top_rated?api_key=${key}&language=en-US&page=${pageNo}`);\r\n    } else if (queryType===\"discover\") { \r\n    // list of all movies \r\n         response = await axios.get(`https://api.themoviedb.org/3/discover/movie?api_key=${key}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=${pageNo}`);\r\n    }\r\n     \r\n    \r\n    return response;\r\n};\r\n\r\nconst actorDetails = async (actorName) => {\r\n    const actor = await axios.get(`https://api.themoviedb.org/3/search/person?api_key=${key}&language=en-US&page=1&include_adult=false&query=${actorName}`);\r\n    return actor;\r\n};\r\n\r\nconst recomendations = async (movieId) => {\r\n    const recomendedMovies = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/recommendations?api_key=${key}&language=en-US&page=1`);\r\n    return recomendedMovies;                  \r\n};\r\n\r\nconst getOneMovie = async (movieId) => {\r\n    const movie = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}?api_key=${key}&language=en-US`);\r\n    return movie;\r\n};\r\n\r\nconst getCredits = async (movieId) => {\r\n    const credits = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${key}&language=en-US`);\r\n    return credits;\r\n}\r\n\r\nconst getMoviesForActor = async (actorId) => {\r\n    const movies = await axios.get(`https://api.themoviedb.org/3/person/${actorId}/movie_credits?api_key=${key}&language=en-US`);\r\n    return movies;\r\n}\r\n\r\n\r\n\r\n\r\nexport {\r\n    getTMDBconf, \r\n    getTMDBmovies,\r\n    actorDetails,\r\n    recomendations,\r\n    getOneMovie,\r\n    getCredits,\r\n    getMoviesForActor\r\n};","import axios from 'axios';\r\nconst getOMDB = async(movieName) => {\r\n    const key = '5a52e586'; //gil \r\n    const response = await axios.get(`http://www.omdbapi.com/?apikey=${key}&t=${movieName}&r=json`);\r\n    return response;\r\n};\r\n\r\nexport {\r\n    getOMDB\r\n};","import React, { useState, useEffect } from 'react';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './card.css'\r\n\r\n\r\nfunction Card(props) {\r\n    return (\r\n        <div className=\"main-cards px-2\">\r\n            <div className=\"movie-card\">\r\n                <Link to={`/movie/${props.movie.id}`}>\r\n                    <img className=\"image\" src={`${props.movie.base_url}/${props.movie.logo_sizes[2]}/${props.movie.poster_path}`} />\r\n                </Link>\r\n                {props.movie.OMDB &&\r\n                        <p className=\"categories\">{props.movie.OMDB.data.Genre.split(\",\")[0]}</p>\r\n                }\r\n                <div className=\"card-contant\">\r\n                    <h3 className=\"title\">{props.movie.title}</h3>\r\n                    <p className=\"year\">Released: {props.movie.release_date}</p>\r\n                    <footer className=\"foot\">\r\n                        <div className=\"meta\">\r\n                            <div className=\"duration\">\r\n                                {props.movie.OMDB &&\r\n                                    <span className=\"duration\"><i className=\"fa fa-clock-o\"></i>Duration: {props.movie.OMDB.data.Runtime}</span>\r\n                                }\r\n                            </div>\r\n                            <div className='viewers'>\r\n                                <span className=\"views\"><i className=\"fa fa-comments\"></i><a href=\"#\">Viewers Rate: {props.movie.popularity}</a></span>\r\n                            </div>\r\n                        </div>\r\n                    </footer>\r\n                </div>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Card; ","import React, { useState, useEffect } from 'react';\r\nimport {useParams, useHistory, Link} from 'react-router-dom';\r\nimport {Route} from 'react-router-dom'; \r\n\r\nimport './style.css';\r\nimport { actorDetails, recomendations, getOneMovie, getTMDBconf, getCredits, getMoviesForActor} from '../../api/TMDB';\r\nimport { getOMDB } from '../../api/OMDB';\r\n\r\n//play with material-ui\r\nimport Button from '@material-ui/core/Button';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport Alert from '@material-ui/lab/Alert';\r\n//icons\r\nimport RateReviewIcon from '@material-ui/icons/RateReview';\r\nimport ThumbUpOutlinedIcon from '@material-ui/icons/ThumbUpOutlined';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport TheatersIcon from '@material-ui/icons/Theaters';\r\n//fonts\r\nimport 'fontsource-roboto';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nfunction MovieDetails () { \r\n\r\n    let {movieId}=useParams(); \r\n    const history = useHistory();\r\n\r\n    const [movie, setMovie] = useState();\r\n    const [confImg, setConfImg] = useState();\r\n    const [actor, setActor] = useState();\r\n    const [moviesForActor, setMoviesForActor] = useState();\r\n    const [rating, getRating] = useState();\r\n    const [recomendedMovies, setRecomendedMovies] = useState();\r\n    const [loading, setLoading] = useState(false);\r\n    const [open, setOpen] = useState(false); \r\n    \r\n    useEffect(async () => {\r\n        window.scrollTo(0, 0);\r\n        \r\n        //add flag for loading sign\r\n        setLoading(true);\r\n\r\n        //get movie \r\n        const movieData = await getOneMovie(movieId);\r\n        setMovie(movieData);\r\n\r\n        //get rating from OMDB\r\n        const omdb = await getOMDB(movieData.data.title);\r\n        getRating(omdb);\r\n\r\n        //get configuration for images\r\n        const imgConf = await getTMDBconf();\r\n        setConfImg(imgConf);\r\n\r\n        //get actors from credits\r\n        const credits = await getCredits(movieId);\r\n        setActor(credits);\r\n\r\n        //show recomended movies\r\n        const recomendedMoviesData = await recomendations(movieId);\r\n        setRecomendedMovies(recomendedMoviesData);\r\n\r\n        setLoading(false);\r\n\r\n    },[movieId]);\r\n\r\n    //alert for Review\r\n    const handleClick = () => {\r\n        setOpen(true);\r\n        };\r\n        const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen(false);\r\n        };\r\n\r\n    //show movies of a specific actor\r\n    const showMovies = async (actorId) => {\r\n        const actorMoviesData = await getMoviesForActor(actorId);\r\n        setMoviesForActor(actorMoviesData);\r\n        console.log(actorMoviesData);\r\n    }\r\n\r\n    const removeActorMovies = () => {\r\n        setMoviesForActor();\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <div className=\"head\">\r\n                {\r\n                    movie &&\r\n                    <div className=\"detailsPage head-details\"> \r\n                    <Typography variant=\"h2\">\r\n                        {movie.data.title}\r\n                    </Typography>\r\n                    <Typography variant=\"subtitle1\">\r\n                        {movie.data.tagline}\r\n                    </Typography>\r\n                        <h4 className=\"plot-summery\"><i>{movie.data.overview}</i></h4>\r\n                        <h4 className=\"plot-summery\">Released date: {movie.data.release_date}</h4>\r\n                        <Typography variant=\"h4\">\r\n                            Ratings\r\n                        </Typography>\r\n                        {rating && !rating.data.Error && rating.data.Ratings.map((rating, index) => \r\n                        {\r\n                            return (\r\n                                <h3 key={index}>\r\n                                    <div><ThumbUpOutlinedIcon /> {rating.Source} : {rating.Value}</div>\r\n                                </h3>\r\n                            )\r\n                        }\r\n                        )\r\n                        }\r\n                        {\r\n                            rating && rating.data.Error && \r\n                            <h3><i>No ratings</i></h3>\r\n\r\n                        }\r\n                        <Button className=\"detailsPage review-button\" variant=\"contained\" color=\"primery\" startIcon={<RateReviewIcon />}\r\n                            onClick={handleClick}\r\n                        >\r\n                            Add your own review\r\n                        </Button>\r\n                        <Snackbar open={open} autoHideDuration={6000} onClose={handleClose} >\r\n                            <Alert variant=\"filled\" severity=\"error\" >\r\n                                Nobody cares what you think\r\n                            </Alert>\r\n                        </Snackbar>\r\n                    </div>\r\n                }\r\n                {\r\n                    confImg && \r\n                    <img className='detailsPage mainImg' src={`${confImg.data.images.base_url}/${confImg.data.images.profile_sizes[2]}/${movie.data.poster_path}`} alt={movie.data.title} />   \r\n                }\r\n                {/* <button onClick={goHome} >Back</button> */}\r\n            </div>\r\n\r\n        <hr />\r\n\r\n        {\r\n            loading &&\r\n            <img className ='loading' src='/images/loading.gif' alt='Loading' />\r\n        }\r\n        {\r\n            !loading &&\r\n            <div className=\"afetrLoading\">\r\n                <div className=\"headline Lead-Actors\">\r\n                    <Typography variant=\"h3\">\r\n                        Lead Actors:\r\n                    </Typography>\r\n                </div>\r\n                <div className=\"detaisPage actors\">\r\n                    <div>\r\n                        {actor && \r\n                            actor.data.cast.slice(0,5).map((actorUrl, index) => \r\n                            {return(\r\n                                actorUrl.profile_path && \r\n                                <Tooltip key={index} title={actorUrl.name} placement=\"top\">\r\n                                    <img key={index} className=\"oneActor\" \r\n                                    src={`${confImg.data.images.base_url}/${confImg.data.images.profile_sizes[2]}/${actorUrl.profile_path}`} alt={actorUrl.name} \r\n                                    onClick={() => showMovies(actorUrl.id)}\r\n                                    />\r\n                                </Tooltip>\r\n                                )\r\n                            })\r\n                        }\r\n                        <ul>\r\n                        <h2>Do I look familiar to you?</h2>\r\n                            {\r\n                                moviesForActor && \r\n                                moviesForActor.data.cast.slice(0,5).map(movie => \r\n                                <li><TheatersIcon color=\"primary\"/> {` I played ${movie.character} in `}\r\n                                    <Link to={`/movie/${movie.id}`} onClick={() => removeActorMovies()}>{movie.original_title}</Link>\r\n                                </li>)\r\n                            }\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n\r\n                <hr />\r\n\r\n                    <div className=\"similarMovies-header\">\r\n                        <Typography variant=\"h4\">\r\n                            You may like also...\r\n                        </Typography>\r\n                    </div>\r\n                <div className=\"similarMovies\">\r\n                    {recomendedMovies && recomendedMovies.data.results.slice(0,10).map((movieUrl, index) => \r\n                    {return(\r\n                    movieUrl.poster_path &&\r\n                        <Route path=\"/movie/:movieId\">\r\n                            <Link to={`/movie/${movieUrl.id}`} onClick={() => removeActorMovies()}>\r\n                                <img key={index} className=\"movieSim\"  \r\n                                src={`${confImg.data.images.base_url}/${confImg.data.images.profile_sizes[2]}/${movieUrl.poster_path}`} \r\n                                alt={movieUrl.title}\r\n                                />   \r\n                            </Link>\r\n                        </Route>\r\n                    )}\r\n                    )}\r\n                </div>\r\n                <div className=\"button backToMain\">\r\n                <Button href=\"/\" variant=\"contained\" color=\"secondary\">\r\n                    <HomeIcon />\r\n                </Button>\r\n            </div>\r\n            </div>\r\n            \r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MovieDetails; ","import { Link } from 'react-router-dom';\r\n\r\n\r\nfunction MovieNav(props) {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n            <Link to={'/'}>\r\n            <a className=\"navbar-brand\" href=\"#\">Movies</a>\r\n            </Link>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                <ul className=\"navbar-nav mr-auto\">\r\n                    <li className=\"nav-item active\">\r\n                        <Link to={'/'}>\r\n                        <a className=\"nav-link\" href=\"#\">Home <span className=\"sr-only\">(current)</span></a>\r\n                        </Link>\r\n                    </li>\r\n                    <li className=\"nav-item active\">\r\n                        <Link to={'/actors'}>\r\n                        <a className=\"nav-link\" href=\"#\">Actors</a>\r\n                        </Link>\r\n                    </li>\r\n                \r\n                </ul>\r\n                <form className=\"form-inline my-2 my-lg-0\">\r\n                    <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"\r\n                    defaultValue={props.search}\r\n                    onChange={props.onSearch}\r\n                    />\r\n                    <button className=\"btn btn-outline-secondary my-2 my-sm-0\" type=\"submit\">Search</button>\r\n                </form>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\nexport default MovieNav","import axios from 'axios';\r\nconst getMostPopular = async(pageNo) => {\r\n    const key = 'ea089a6ea65455511c68e55304c2398e';\r\n    const response = await axios.get(`https://api.themoviedb.org/3/person/popular?api_key=${key}&language=en-US&page=${pageNo}`);\r\n    return response;\r\n};\r\n\r\nexport {\r\n    getMostPopular\r\n};","import React, { useState, useEffect } from 'react';\r\n\r\nimport { getMostPopular } from '../../api/People';\r\nimport './actors.css';\r\n\r\nfunction People() {\r\n\r\n    const [mostPopular, setMostPopular] = useState([]);\r\n    const [btn, setBtn] = useState(1);\r\n\r\n    const next = (pageNo) => {\r\n        setBtn(pageNo + 1)\r\n        console.log(pageNo);\r\n    };\r\n    const back = (pageNo) => {\r\n        setBtn(pageNo - 1)\r\n        console.log(pageNo);\r\n    };\r\n\r\n    useEffect(async () => {\r\n        const response = await getMostPopular(btn);\r\n        setMostPopular(response.data.results);\r\n\r\n    }, [btn]);\r\n\r\n    const imgAddress = 'https://image.tmdb.org/t/p/w500'\r\n    return (\r\n\r\n        <div>\r\n\r\n            <button onClick={() => next(btn)} className=\"actors-btn\">Next</button>\r\n            <button onClick={() => back(btn)} className=\"actors-btn\">Back</button>\r\n\r\n            <div className=\"actors-card px-2\">\r\n                {\r\n                    mostPopular && mostPopular.map(item =>\r\n                        <div className=\"actors\">\r\n                            <div className=\"img-wrapper\">\r\n                                <img className=\"actor-img\" src={`${imgAddress}${item.profile_path}`} />\r\n                            </div>\r\n                            <h2 className=\"actor-name\">{item.name}</h2>\r\n                            <ul>\r\n                                {item.known_for.map(movie => {\r\n                                    return <li>{movie.title}</li>\r\n                                })}\r\n                            </ul>\r\n                            <footer className=\"actor-popularity\">\r\n                                <h5>Actor Rating: {item.popularity}</h5>\r\n                            </footer>\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default People\r\n","import React, { useState, useEffect } from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './home.css';\r\nimport { getTMDBconf, getTMDBmovies } from '../../api/TMDB';\r\nimport { getOMDB } from '../../api/OMDB';\r\nimport Card from '../card/index.jsx';\r\nimport MovieDetails from '../detailsPage/index.jsx';\r\nimport MovieNav from '../../components/Navbar/index.jsx';\r\nimport People from '../../pages/actors/index.jsx';\r\n\r\n\r\nfunction Home() {\r\n\r\n    // const [conf, setConf] = useState({});\r\n    // const [page, setPage] = useState({});\r\n    const emptyMovieArray = [\r\n        {\r\n            page: 0,\r\n            total_pages: 0,\r\n            queryType: \"discover\",\r\n            adult: '',\r\n            base_url: '',\r\n            logo_sizes: [\"w45\", \"w92\", \"w154\", \"w185\", \"w300\", \"w500\", \"original\"],\r\n            poster_sizes: [\"w92\", \"w154\", \"w185\", \"w342\", \"w500\", \"w780\", \"original\"],\r\n            profile_sizes: [\"w45\", \"w185\", \"h632\", \"original\"],\r\n            still_sizes: [\"w92\", \"w185\", \"w300\", \"original\"],\r\n            backdrop_path: '',\r\n            genre_ids: [],\r\n            id: 0,\r\n            original_language: '',\r\n            original_title: '',\r\n            overview: '',\r\n            popularity: '',\r\n            poster_path: '',\r\n            release_date: '',\r\n            title: '',\r\n            video: '',\r\n            OMDB: null\r\n            // attempts at returning only parts of the OMDB object failed with key doesn't exist messages \r\n        }\r\n    ];\r\n\r\n    const [movies, setMovies] = useState(emptyMovieArray);\r\n    let search = '';\r\n\r\n    const onSearch = ({ target: { value: text } }) => {\r\n        if (!text) {\r\n            setMovies(movies);\r\n            return\r\n        }\r\n        const lower = text.toLowerCase();\r\n        const filtered = movies.filter((movie) =>\r\n            movie.title.toLowerCase().includes(lower)\r\n        )\r\n        setMovies(filtered)\r\n    }\r\n\r\n    const sortByViewers = () => {\r\n        const populars = [...movies];\r\n        populars.sort((a, b) => b.popularity - a.popularity);\r\n        setMovies(populars);\r\n    };\r\n\r\n\r\n    // {movies.release_date} shuold be convert to date so that sortByDate function work properly\r\n    const sortByDate = () => {\r\n        const newest = [...movies];\r\n        newest.sort((a, b) => new Date(b.release_date) - (new Date(a.release_date)))\r\n        setMovies(newest);\r\n    };\r\n\r\n    const sortAlphabetically = () => {\r\n        const alfaBet = [...movies];\r\n        alfaBet.sort((a, b) => (a.title > b.title) ? 1 : -1);\r\n        setMovies(alfaBet);\r\n    };\r\n\r\n    const showWhichMovieList = (e) => {\r\n        // if (e.target.value === 'top_rated') {\r\n        fetchMovies(e.target.value);\r\n        //    } else if (e.target.value === 'discover') {                            \r\n        // fetchMovies\r\n        //    }            \r\n    }\r\n\r\n    async function fetchMovies(queryType, pageNo = 1) {\r\n        // if(!localStorage.getItem('movies')){                   //stop localstorage - gs \r\n        let configuration = await getTMDBconf();\r\n\r\n        // top_rated\r\n        // discover\r\n        let tmpMoviesPage = await getTMDBmovies(queryType, pageNo);\r\n\r\n        //based on Esraa's example - for each movie, get data from second API \r\n        //const response2 = await Promise.all(movies.map(movie => secondApiRequest(movie.name)))\r\n        const moreMoviesData = await Promise.all(tmpMoviesPage.data.results.map\r\n            (movie => getOMDB(movie.title)));\r\n        //console.log(\"=OMDB=\", moreMoviesData); \r\n        // now, lets create a unified Array of movies                     \r\n\r\n        // console.log(\"configuration=\", configuration); \r\n        const c_base_url = configuration.data.images.base_url;\r\n        const c_logo_sizes = configuration.data.images.logo_sizes;   // [\"w45\", \"w92\", \"w154\", \"w185\", \"w300\", \"w500\", \"original\"]        \r\n        const c_poster_sizes = configuration.data.images.poster_sizes; // [\"w92\", \"w154\", \"w185\", \"w342\", \"w500\", \"w780\", \"original\"]\r\n        const c_profile_sizes = configuration.data.images.profile_sizes; // [\"w45\", \"w185\", \"h632\", \"original\"]\r\n        const c_still_sizes = configuration.data.images.still_sizes; // [\"w92\", \"w185\", \"w300\", \"original\"]\r\n\r\n        const moviesArray = [];\r\n\r\n        // console.log(\"tmpMoviesPage=\", tmpMoviesPage); \r\n        tmpMoviesPage.data.results.map(movie => {\r\n            // console.log(\"in loop OMDB movie=\", moreMoviesData); \r\n            //console.log(\"in loop OMDB movie=\", moreMoviesData.find(OMDBmovie=>OMDBmovie.data.Title===movie.title)); \r\n            moviesArray.push(\r\n                {\r\n                    page: tmpMoviesPage.data.page,\r\n                    total_pages: tmpMoviesPage.data.total_pages,\r\n                    queryType: queryType,\r\n                    adult: movie.adult,\r\n                    base_url: c_base_url,\r\n                    logo_sizes: c_logo_sizes,\r\n                    poster_sizes: c_poster_sizes,\r\n                    profile_sizes: c_profile_sizes,\r\n                    still_sizes: c_still_sizes,\r\n                    backdrop_path: movie.backdrop_path,\r\n                    genre_ids: movie.genre_ids,\r\n                    id: movie.id,\r\n                    original_language: movie.original_language,\r\n                    original_title: movie.original_title,\r\n                    overview: movie.overview,\r\n                    popularity: movie.popularity,\r\n                    poster_path: movie.poster_path,\r\n                    release_date: movie.release_date,\r\n                    title: movie.title,\r\n                    video: movie.video,\r\n                    OMDB: moreMoviesData.find(OMDBmovie => OMDBmovie.data.Title === movie.title)\r\n                    // attempts at returning only parts of the OMDB object failed with key doesn't exist messages \r\n                });\r\n        });\r\n\r\n        // setConf(configuration.data.images); \r\n        // setPage(tmpMoviesPage.data);            // page \r\n        setMovies(moviesArray);     // movies   - moviesPage.data.results\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchMovies(\"discover\");\r\n    }, []);\r\n\r\n    // console.log(\"conf=\",conf);    \r\n    // console.log(\"base_url=\",conf.base_url);    \r\n    // console.log(\"page=\",page);                   \r\n    console.log(\"movies=\", movies);\r\n    // console.log(\"movies.ganer=\",movies.\r\n    // genres.name);\r\n    return (\r\n        <BrowserRouter>\r\n\r\n            <MovieNav onSearch={onSearch} />\r\n\r\n            <Switch>\r\n                <Route path={[\"/home\", \"/\"]} exact={true}>\r\n\r\n                    <div className=\"filter\">\r\n                        <div className=\"movie-list mt-3\">\r\n                            <label className=\"selectMovie\" htmlFor=\"sorting\">which movie list:</label>\r\n                            <select className=\"dropDown\" defaultValue=\"discover\"\r\n                                onChange={showWhichMovieList}\r\n                                name=\"whichMovieList\"\r\n                                id=\"whichMovieList\">\r\n                                <option value=\"discover\">Browse </option>\r\n                                <option value=\"top_rated\">Top Rated</option>\r\n                            </select>\r\n                        </div>\r\n\r\n                        <div class=\"form-check\">\r\n                            <input class=\"form-check-input\" type=\"radio\" name=\"exampleRadios\" id=\"exampleRadios1\" value=\"option1\"\r\n                                onChange={sortByViewers}\r\n                            />\r\n                            <label class=\"form-check-label\" for=\"exampleRadios1\">\r\n                                Most popular Movies\r\n                            </label>\r\n                        </div>\r\n                        <div class=\"form-check\">\r\n                            <input class=\"form-check-input\" type=\"radio\" name=\"exampleRadios\" id=\"exampleRadios2\" value=\"option2\"\r\n                                onChange={sortByDate}\r\n                            />\r\n                            <label class=\"form-check-label\" for=\"exampleRadios2\">\r\n                                Newest Movies\r\n                            </label>\r\n                        </div>\r\n                        <div class=\"form-check\">\r\n                            <input class=\"form-check-input\" type=\"radio\" name=\"exampleRadios\" id=\"exampleRadios2\" value=\"option2\"\r\n                                onChange={sortAlphabetically}\r\n                                check />\r\n                            <label class=\"form-check-label\" for=\"exampleRadios2\">\r\n                                Ascending by abc\r\n                            </label>\r\n                        </div>\r\n\r\n\r\n                        <div className=\"pageNavigation-section\">\r\n                            <span className=\"displayPageNum\">{`Page ${movies[0].page} of ${movies[0].total_pages}`}</span>\r\n                            <div className=\"btn-wrapper\">\r\n                                {(movies[0].page > 1) &&\r\n                                    <button className=\"navBtn mr-3\"\r\n                                        onClick={() =>\r\n                                            fetchMovies(movies[0].queryType, movies[0].page - 1)}>\r\n                                        Back</button>}\r\n                                {(movies[0].page < movies[0].total_pages) &&\r\n                                    <button className=\"navBtn mr-3\"\r\n                                        onClick={() =>\r\n                                            fetchMovies(movies[0].queryType, movies[0].page + 1)}>\r\n                                        Next</button>}\r\n                                {(movies[0].page > 1) &&\r\n                                    <button className=\"navBtn mr-3\"\r\n                                        onClick={() =>\r\n                                            fetchMovies(movies[0].queryType, 1)}>\r\n                                        First</button>}\r\n                                {(movies[0].page < movies[0].total_pages) &&\r\n                                    <button className=\"navBtn mr-3\"\r\n                                        onClick={() =>\r\n                                            fetchMovies(movies[0].queryType, movies[0].total_pages)}>\r\n                                        Last</button>}\r\n                            </div>\r\n\r\n                            {/* {movies[0].page===1 ?<p>Hello</p>:<p>World</p>}  */}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"cards-grid\" >\r\n                        {/* <span>{`${movie.id}:  ${movie.title}`} </span>\r\n                            <img src={`${conf.base_url}/${conf.logo_sizes[1]}/${movie.poster_path}`} alt={movie.title}/> */}\r\n\r\n                        {movies.map(movie => {\r\n                            return (\r\n                                <Card key={movie.id} movie={movie} />\r\n                            )\r\n                        })}\r\n                        {/* <button onClick={()=>showMovies()}> Show Movies</button> */}\r\n                    </div>\r\n                </Route>\r\n                <Route path={'/actors'}>\r\n                    <div className=\"actorsWrapper\">\r\n                        <People />\r\n                    </div>\r\n                </Route>\r\n                <Route path=\"/movie/:movieId\">\r\n                    <MovieDetails movies={movies} />\r\n                </Route>\r\n            </Switch>\r\n        </BrowserRouter>\r\n    )\r\n};\r\n\r\nexport default Home;\r\n","import { BrowserRouter, Route, Switch } from 'react-router-dom';\r\n\r\n\r\nimport './App.css';\r\nimport Home from './pages/home/index.jsx';\r\nimport People from './pages/actors/index.jsx';\r\nimport MoivieNav from './components/Navbar/index.jsx';\r\nimport DetailsPage from './pages/detailsPage/index.jsx';\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      {/* <MoivieNav /> */}\r\n      <Switch>\r\n          <Route path=\"/\" exact={true}>\r\n              <Home />\r\n          </Route >\r\n          <Route path=\"/actors\">\r\n              <People />\r\n          </Route>\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\n\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}